I"8<p><a href="https://leetcode.com/problems/predict-the-winner/description/">问题描述</a><br />
输入一个二维字符类型数组，其元素取值只可能为’0’或’1’。求该数组中由’1’构成的最大正方形的面积（即包含的元素个数）。例如，如果输入如下二维数组：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	1 0 1 0 0  
	1 0 1 1 1  
	1 1 1 1 1  
	1 0 0 1 0  
</code></pre></div></div>
<p>那么，就输出4。</p>

<hr />

<h3 id="一brute-force">一、Brute Force</h3>
<p>最容易想到的是一种比较直接的做法：（1）遍历该二维数组；（2）如果当前元素为’1’，就计算以该元素为左下角的能构成的最大正方形的边长；（3）最后，最大的边长的平方即为题目要求的面积。<br />
其中第（2）中计算最大正方形边长的方法是，从该元素出发，向左向上遍历，直到遇到边界或‘0’为止。<br />
这种方法需要逐个遍历二维数组中的元素，并且在处理每个元素时，最坏情形下需要进一步逐个遍历二维数组。因此，时间复杂度为O((R * C) ^ 2)，其中R和C分别为二维数组的行数和列数；不需要辅助空间，因而空间复杂度为O(1)。</p>

<h3 id="二动态规划dp优化时间复杂度">二、动态规划（DP）：优化时间复杂度</h3>
<p>在Brute Force的解法中，每当要计算以当前元素为左下角的正方形的最大面积时，都要从该元素出发，向左向上遍历二维数组，从而都对某些元素而言多次重复了之前已经做过的遍历操作。可见，该解法存在子问题的重复求解现象，而这正是DP排上用场的场合。<br />
DP本质上是用表来存储中间状态，从而避免子问题的重复求解。另外，解决DP问题的关键在于找到状态方程。<br />
在这个问题中，可以定义一个与输入数组matrix行列对应相等的整型数组lens。lens中某个位置的元素用于存放在matrix中以该位置为左下角的最大正方形的边长值。对于lens中位置为(i , j)的元素，其状态按如下更新规则确定：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IF matrix[i][j] == '1' THEN  
	lens[i][j] = min(lens[i - 1][j], lens[i][j - 1],   
		lens[i - 1][j - 1]) + 1;  
</code></pre></div></div>
<p>最后，返回最大边长的平方即可。代码如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maximalSquare</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>  
    <span class="k">if</span><span class="o">(</span><span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>  
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>  
    <span class="o">}</span>  
      
    <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>  
    <span class="kt">int</span><span class="o">[][]</span> <span class="n">lens</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">];</span>  
    <span class="kt">int</span> <span class="n">maxlen</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>  
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>  
            <span class="k">if</span><span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'0'</span><span class="o">)</span>  
                <span class="k">continue</span><span class="o">;</span>  
            <span class="kt">int</span> <span class="n">len_i_1</span> <span class="o">=</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">lens</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">],</span>  
                <span class="n">len_j_1</span> <span class="o">=</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">lens</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span>  
                <span class="n">len_ij_1</span> <span class="o">=</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">lens</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>  
            <span class="n">lens</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">len_i_1</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">len_j_1</span><span class="o">,</span> <span class="n">len_ij_1</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>  
            <span class="n">maxlen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxlen</span><span class="o">,</span> <span class="n">lens</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>  
        <span class="o">}</span>  
    <span class="o">}</span>  
      
    <span class="k">return</span> <span class="n">maxlen</span> <span class="o">*</span> <span class="n">maxlen</span><span class="o">;</span>  
<span class="o">}</span>  
</code></pre></div></div>
<p>时间复杂度O(R * C)，空间复杂度O(R *C)。对比Brute Force，相当于用空间换时间。</p>

<h3 id="三进一步优化空间复杂度">三、进一步优化空间复杂度</h3>
<p>通过仔细观察DP的状态更新过程可以发现，其实在计算lens[i][j]的时候，只用到了lens中与(i, j)相邻的行和相邻的列的值，而与其它值无关。因此，可以对空间开销进一步优化，将lens的规模由R * C变为C。代码如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maximalSquare</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>  
    <span class="k">if</span><span class="o">(</span><span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>  
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>  
    <span class="o">}</span>  
      
    <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>  
    <span class="kt">int</span><span class="o">[]</span> <span class="n">lens</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">col</span><span class="o">];</span>  
    <span class="kt">int</span> <span class="n">maxlen</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>  
        <span class="kt">int</span> <span class="n">pre</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>  
            <span class="k">if</span><span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'0'</span><span class="o">)</span> <span class="o">{</span>  
                <span class="n">lens</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  
                <span class="k">continue</span><span class="o">;</span>  
            <span class="o">}</span>  
            <span class="kt">int</span> <span class="n">len_i_1</span> <span class="o">=</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">lens</span><span class="o">[</span><span class="n">j</span><span class="o">],</span>  
                <span class="n">len_j_1</span> <span class="o">=</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">lens</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span>  
                <span class="n">len_ij_1</span> <span class="o">=</span> <span class="n">pre</span><span class="o">;</span>  
            <span class="n">pre</span> <span class="o">=</span> <span class="n">lens</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>  
              
            <span class="n">lens</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">len_i_1</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">len_j_1</span><span class="o">,</span> <span class="n">len_ij_1</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>  
            <span class="n">maxlen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxlen</span><span class="o">,</span> <span class="n">lens</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>  
        <span class="o">}</span>  
    <span class="o">}</span>  
      
    <span class="k">return</span> <span class="n">maxlen</span> <span class="o">*</span> <span class="n">maxlen</span><span class="o">;</span>  
<span class="o">}</span>  
</code></pre></div></div>
<p>时间复杂度O(R * C)，空间复杂度O(C)。</p>

<hr />

<p><strong>总结</strong>：算法题求最佳解法的过程有时候是一个对已有解法不断进行优化的过程。对于一个问题，通常我们总能想到一个原理性的解法，而这种解法虽然正确但是往往时间或者空间开销不可接受。如果该解法中存在子问题重复计算的现象，那么通常可以通过DP来优化时间复杂度。DP本质上是一种用空间开销增加的代价来换取时间复杂度降低的做法，其关键的是找出状态转换方程。在用DP成功地解决了问题之后，可以通过分析DP状态转换过程所涉及的变量，看能否进一步压缩空间开销。</p>

:ET